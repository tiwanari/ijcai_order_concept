ファイルlib/.gitはディレクトリー、ファイルliblinear/.gitは通常ファイル"
diff -uprN lib/predict.c liblinear/predict.c
--- lib/predict.c	2016-04-09 20:15:57.786148000 +0900
+++ liblinear/predict.c	2016-04-09 20:00:08.901784000 +0900
@@ -14,6 +14,8 @@ int max_nr_attr = 64;
 
 struct model* model_;
 int flag_predict_probability=0;
+int flag_ablation_test=0;
+int* ablation_ids;
 
 void exit_input_error(int line_num)
 {
@@ -97,6 +99,8 @@ void do_predict(FILE *input, FILE *outpu
 
 		while(1)
 		{
+			int k;
+			int index_in_int;
 			if(i>=max_nr_attr-2)	// need one more for index = -1
 			{
 				max_nr_attr *= 2;
@@ -108,8 +112,20 @@ void do_predict(FILE *input, FILE *outpu
 
 			if(val == NULL)
 				break;
+
+			index_in_int = (int) strtol(idx, &endptr, 10);
+			int is_ablation = false;
+			for (k = 0; k < flag_ablation_test; ++k)
+				if (index_in_int == ablation_ids[k]) {
+					is_ablation = true;
+					break;
+				}
+
+			if (is_ablation)
+				continue;
+
 			errno = 0;
-			x[i].index = (int) strtol(idx,&endptr,10);
+			x[i].index = index_in_int;
 			if(endptr == idx || errno != 0 || *endptr != '\0' || x[i].index <= inst_max_index)
 				exit_input_error(total+1);
 			else
@@ -177,16 +193,47 @@ void exit_with_help()
 	printf(
 	"Usage: predict [options] test_file model_file output_file\n"
 	"options:\n"
+	"-a ablation test: feature ids which will be ignored (e.g. -a \"1&2\" to ignore column 1 & 2). please specify the same ids you selected for training\n"
 	"-b probability_estimates: whether to output probability estimates, 0 or 1 (default 0); currently for logistic regression only\n"
 	"-q : quiet mode (no outputs)\n"
 	);
 	exit(1);
 }
 
+// e.g. str = "1&2&33" -> ids = {1, 2, 33}, and return 3 (the number of elements)
+int split_string_into_ids(char* str, int** ids)
+{
+	int max_num_ids = 1; // starts with 1 (e.g. "1&2" -> #ids = 2)
+	int i;
+	// count the number of ids by checking delimiters
+	for (i = 0; str[i] != '\0'; ++i)
+		if (str[i] == '&')
+			max_num_ids++;
+	*ids = (int *)malloc(max_num_ids * sizeof(int));
+
+	int k = 0;
+	char *num_str, *p;
+	for (num_str = str, p = str; p != NULL;)
+	{
+		p = strchr(num_str, '&');
+		if (p != NULL)	// NULL -> the num_str originally has '\0'
+			*p = '\0';
+
+		int tmp_num;
+		tmp_num = atoi(num_str);
+		num_str = p + 1;
+		if (tmp_num <= 0) // check it is positive
+			continue;
+        info("ignore id %d\n", tmp_num);
+		(*ids)[k++] = tmp_num;
+	}
+	return k;
+}
+
 int main(int argc, char **argv)
 {
 	FILE *input, *output;
-	int i;
+	int i, j;
 
 	// parse options
 	for(i=1;i<argc;i++)
@@ -195,6 +242,13 @@ int main(int argc, char **argv)
 		++i;
 		switch(argv[i-1][1])
 		{
+			case 'a':
+				// this flag is the number of ids
+				flag_ablation_test = split_string_into_ids(argv[i], &ablation_ids);
+				info("%d features (%s) will be ablated\n", flag_ablation_test, argv[i]);
+				for (j = 0; j < flag_ablation_test; ++j)
+					info("%d will be ignored\n", ablation_ids[j]);
+				break;
 			case 'b':
 				flag_predict_probability = atoi(argv[i]);
 				break;
@@ -240,4 +294,3 @@ int main(int argc, char **argv)
 	fclose(output);
 	return 0;
 }
-
diff -uprN lib/train.c liblinear/train.c
--- lib/train.c	2016-04-09 20:15:57.798135000 +0900
+++ liblinear/train.c	2016-04-09 20:00:33.435343000 +0900
@@ -15,6 +15,7 @@ void exit_with_help()
 	printf(
 	"Usage: train [options] training_set_file [model_file]\n"
 	"options:\n"
+	"-a ablation test: feature ids which will be ignored (e.g. -a \"1&2\" to ignore column 1 & 2)\n"
 	"-s type : set type of solver (default 1)\n"
 	"  for multi-class classification\n"
 	"	 0 -- L2-regularized logistic regression (primal)\n"
@@ -97,6 +98,8 @@ int flag_C_specified;
 int flag_solver_specified;
 int nr_fold;
 double bias;
+int flag_ablation_test=0;
+int* ablation_ids;
 
 int main(int argc, char **argv)
 {
@@ -195,9 +198,39 @@ void do_cross_validation()
 	free(target);
 }
 
-void parse_command_line(int argc, char **argv, char *input_file_name, char *model_file_name)
+// e.g. str = "1&2&33" -> ids = {1, 2, 33}, and return 3 (the number of elements)
+int split_string_into_ids(char* str, int** ids)
 {
+	int max_num_ids = 1; // starts with 1 (e.g. "1&2" -> #ids = 2)
 	int i;
+	// count the number of ids by checking delimiters
+	for (i = 0; str[i] != '\0'; ++i)
+		if (str[i] == '&')
+			max_num_ids++;
+	*ids = (int *)malloc(max_num_ids * sizeof(int));
+
+	int k = 0;
+	char *num_str, *p;
+	for (num_str = str, p = str; p != NULL;)
+	{
+		p = strchr(num_str, '&');
+		if (p != NULL)	// NULL -> the num_str originally has '\0'
+			*p = '\0';
+
+		int tmp_num;
+		tmp_num = atoi(num_str);
+		num_str = p + 1;
+		if (tmp_num <= 0) // check it is positive
+			continue;
+		(*ids)[k++] = tmp_num;
+	}
+	return k;
+}
+
+
+void parse_command_line(int argc, char **argv, char *input_file_name, char *model_file_name)
+{
+	int i, j;
 	void (*print_func)(const char*) = NULL;	// default printing to stdout
 
 	// default values
@@ -223,6 +256,14 @@ void parse_command_line(int argc, char *
 			exit_with_help();
 		switch(argv[i-1][1])
 		{
+			case 'a':
+				// this flag is the number of ids
+				flag_ablation_test = split_string_into_ids(argv[i], &ablation_ids);
+				printf("%d features (%s) will be ablated\n", flag_ablation_test, argv[i]);
+				for (j = 0; j < flag_ablation_test; ++j)
+					printf("%d will be ignored\n", ablation_ids[j]);
+				break;
+
 			case 's':
 				param.solver_type = atoi(argv[i]);
 				flag_solver_specified = 1;
@@ -405,14 +446,27 @@ void read_problem(const char *filename)
 
 		while(1)
 		{
+			int k;
+			int index_in_int;
 			idx = strtok(NULL,":");
 			val = strtok(NULL," \t");
 
 			if(val == NULL)
 				break;
 
+			index_in_int = (int) strtol(idx, &endptr, 10);
+			int is_ablation = false;
+			for (k = 0; k < flag_ablation_test; ++k)
+				if (index_in_int == ablation_ids[k]) {
+					is_ablation = true;
+					break;
+				}
+
+			if (is_ablation)
+				continue;
+
 			errno = 0;
-			x_space[j].index = (int) strtol(idx,&endptr,10);
+			x_space[j].index = index_in_int;
 			if(endptr == idx || errno != 0 || *endptr != '\0' || x_space[j].index <= inst_max_index)
 				exit_input_error(i+1);
 			else
